/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.2.2-221
 *
 */
import { FluenceClient, PeerIdB58 } from '@fluencelabs/fluence';
import { RequestFlowBuilder } from '@fluencelabs/fluence/dist/api.unstable';
import { RequestFlow } from '@fluencelabs/fluence/dist/internal/RequestFlow';


// Services

//CharacterCount
//defaultId = undefined

//count_characters: (from: string, message: string) => {count:string;msg:string;sender:string}
//END CharacterCount




//CharacterCountPeer
//defaultId = "CharacterCountPeer"

//count_characters: (message: {count:string;msg:string;sender:string}) => {count:string;msg:string;sender:string}
//END CharacterCountPeer



// Functions

export async function characterCount(client: FluenceClient, targetPeerId: string, targetRelayPeerId: string, msg: string, config?: {ttl?: number}): Promise<{count:string;msg:string;sender:string}> {
    let request: RequestFlow;
    const promise = new Promise<{count:string;msg:string;sender:string}>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
         (call %init_peer_id% ("getDataSrv" "targetPeerId") [] targetPeerId)
        )
        (call %init_peer_id% ("getDataSrv" "targetRelayPeerId") [] targetRelayPeerId)
       )
       (call %init_peer_id% ("getDataSrv" "msg") [] msg)
      )
      (call -relay- ("op" "noop") [])
     )
     (xor
      (seq
       (call -relay- ("op" "noop") [])
       (call "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi" ("96630a1b-ace3-4643-9a64-2077c358e998" "count_characters") [%init_peer_id% msg] comp)
      )
      (seq
       (call -relay- ("op" "noop") [])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
      )
     )
    )
    (call -relay- ("op" "noop") [])
   )
   (par
    (seq
     (call targetRelayPeerId ("op" "noop") [])
     (xor
      (call targetPeerId ("CharacterCountPeer" "count_characters") [comp] res)
      (seq
       (seq
        (call targetRelayPeerId ("op" "noop") [])
        (call -relay- ("op" "noop") [])
       )
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
      )
     )
    )
    (null)
   )
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [comp])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId!;
                });
                h.on('getDataSrv', 'targetPeerId', () => {return targetPeerId;});
h.on('getDataSrv', 'targetRelayPeerId', () => {return targetRelayPeerId;});
h.on('getDataSrv', 'msg', () => {return msg;});
                h.onEvent('callbackSrv', 'response', (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for characterCount');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request!);
    return promise;
}
      
